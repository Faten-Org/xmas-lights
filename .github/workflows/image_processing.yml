name: Image Processing and Display

on:
  workflow_dispatch:
    inputs:
      image_url:
        description: Image URL
        required: true
        default: https://octodex.github.com/images/dinotocat.png

jobs:
  process_image:
    name: Fetch and Process Image

    runs-on: ubuntu-20.04

    steps:
      #
      # The action is private in our octodemo organization, so need to clone it to use it
      #
      - name: Clone Action
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.OCTODEMOBOT_WINTERFEST_TOKEN }}
          path: graphicsmagick-action
          repository: octodemo/graphicsmagick-image-converter-action
          ref: main

      #
      # Invoke the GitHub Action we have cloned
      #
      - name: Fetch and convert image
        id: processed_image
        uses: ./graphicsmagick-action
        with:
          image_url: ${{ github.event.inputs.image_url }}
          output_image_width: 64

      #
      # Attach the Image as an Artifact so we can access it after the workflow runs, as well as pass it to other jobs
      #
      - name: Save Image
        uses: actions/upload-artifact@v2
        with:
          name: images
          path: ${{ steps.processed_image.outputs.image }}


  display_image:
    name: Display Image

    runs-on: 
      - self-hosted
      - ARM

    # We have a requirement on the process_image job, it needs to complete before we can run
    needs:
      - process_image

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      #
      # Download the process_image artifacts that were uploaded and stored with the workflow run
      #
      - name: Download processed Images
        id: download_images
        uses: actions/download-artifact@v2
        with:
          name: images
          path: ./processed

      - name: Show unpacked images on disk
        run: |
          echo "Unpacked Images from artifact:"
          ls -la ${{ steps.download_images.outputs.download-path }}

      - name: Display image on matrix display
        run: |
          python3 run.py ${{ steps.download_images.outputs.download-path }}/thumbnail.jpg
        working-directory: ./images
      
